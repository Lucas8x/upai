generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Sex {
  male
  female
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Credentials Support
  username      String?         @unique
  password      String?

  //Custom
  posts     Post[]
  comments  Comment[]
  //isAdmin Boolean @default(false)
  country   String?
  birthdate DateTime?
  biography String?
  sex       Sex?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// App Models
model Post {
  id String @id @default(cuid())

  title       String
  description String?
  views       Int       @default(0)
  deleted     Boolean   @default(false)
  files       File[]
  comments    Comment[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Thumbnail {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id       String  @id @default(cuid())
  filename String
  size     Float   @default(0)
  url      String
  blurHash String?

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Comment {
  id      String @id @default(cuid())
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
